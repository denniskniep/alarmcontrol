extend type Query {
  firebaseClientConfiguration: FirebaseClientConfiguration
}

extend type Mutation {
  addNotificationMailContact(organisationId: ID!, name: String, mailAddress : String!): Contact
  addNotificationFirebaseMessageContact(organisationId: ID!, name: String, mail : String!): Contact
  deleteNotificationContact(organisationId: ID!, uniqueContactId : String!): String

  addNotificationSubscriptionForAlertCreated(organisationId: ID!, updateDelaysInSeconds: [Int]!, subscriberContactUniqueIds : [String]!): NotificationSubscription
  editNotificationSubscriptionForAlertCreated(organisationId: ID!, uniqueSubscriptionId: String!, updateDelaysInSeconds: [Int]!, subscriberContactUniqueIds : [String]!): NotificationSubscription
  deleteNotificationSubscription(organisationId: ID!, uniqueSubscriptionId: String!): String
}

type FirebaseClientConfiguration {
  apiKey : String
  projectId : String
  messagingSenderId : String
  appId : String
  pagerUrl : String
}

type NotificationOrganisationConfig {
 contacts: [Contact]
 subscriptions : [NotificationSubscription]
}

type NotificationSubscription {
  uniqueId : String
  subscriberContactUniqueIds : [String]
  notificationConfig : NotificationConfig
}

union NotificationConfig = AlertCreatedNotificationConfig

type AlertCreatedNotificationConfig {
  updateDelaysInSeconds:[Int]
}

interface Contact {
  uniqueId : String
  name : String
}

type MailContact implements Contact {
  uniqueId : String
  name : String
  mailAddress : String
}

type FirebaseMessageContact implements Contact {
  uniqueId : String
  name : String
  mail : String
}
